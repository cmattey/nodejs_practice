{"version":3,"sources":["components/PersonForm.js","components/Note.js","services/persons_util.js","components/Person.js","components/Filter.js","components/SuccessMsg.js","components/ErrorMsg.js","components/App.js","index.js"],"names":["PersonForm","props","onSubmit","addInfo","value","newName","onChange","handleNameChange","newNumber","handleNumChange","type","Note","person","handlePersonRemoved","deleteNote","name","number","onClick","window","confirm","axios","get","then","response","data","newPersonObj","post","id","delete","Person","personUtils","status","console","log","updatePersons","persons","filter","n","catch","error","setErrorMsg","setTimeout","map","searchName","toLowerCase","includes","key","length","Filter","handleSearchChange","SuccessMsg","message","style","color","fontStyle","border","borderRadius","background","ErrorMsg","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","successMsg","setSuccessMsg","errorMsg","useEffect","allData","event","target","preventDefault","alert","personObj","newData","concat","displaySuccessNotification","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.031f7fe7.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => {\n\n  return (\n    <form onSubmit={props.addInfo}>\n      <div>\n        name: <input\n              value={props.newName}\n              onChange={props.handleNameChange}/>\n      </div>\n        number: <input\n                value = {props.newNumber}\n                onChange={props.handleNumChange}/>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\n\nexport default PersonForm\n","import React from 'react'\n\nconst Note = ({person, deleteNote, handlePersonRemoved}) => {\n  // console.log('Inside Note', person)\n\n  const confirmDeletion = () =>{\n    const result = window.confirm(`Delete ${person.name}?`)\n    if(result){\n      return handlePersonRemoved()\n    }\n  }\n\n  return (\n    <div>\n      {person.name}: {person.number}\n      <button onClick={confirmDeletion}>delete</button>\n    </div>\n  )\n}\n\nexport default Note\n","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newPersonObj) => {\n  const request = axios.post(baseUrl, newPersonObj)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => {\n    // console.log('del header', response)\n    return response\n  })\n\n}\n\nexport default {getAll, create, remove}\n","import React from 'react'\nimport Note from './Note.js'\nimport personUtils from '../services/persons_util.js'\n\nconst Person = (props) =>{\n  // console.log('person props', props)\n\n  const handlePersonRemoved = (person) => {\n\n    personUtils\n      .remove(person.id)\n      .then(response => {\n        if(response.status===204){\n          console.log(`Note with id:${person.name} deleted`)\n          // console.log(response)\n          props.updatePersons(props.persons.filter(n=> n.id!==person.id))\n        }\n      })\n      .catch(error=>{\n        props.setErrorMsg(\n          `${person.name} was already removed from Server`\n        )\n        setTimeout(()=>{\n          props.setErrorMsg(null)\n        },5000)\n        props.updatePersons(props.persons.filter(n=> n.id!==person.id))\n      })\n  }\n\n  return(\n    props.persons.map((person) =>{\n      if(props.searchName){\n        if(person.name.toLowerCase().includes(props.searchName.toLowerCase())){\n          // console.log('match')\n          return(<Note key={person.id} person={person} handlePersonRemoved={() => handlePersonRemoved(person)}/>)\n        }\n        else{\n          return null\n        }\n      }\n      else if(props.persons.length>0){\n        // console.log('no-match')\n        return(<Note key={person.id} person={person} handlePersonRemoved={() => handlePersonRemoved(person)}/>)\n      }\n      else{\n        return(<div></div>)\n      }\n    }\n    )\n  )\n}\n\nexport default Person\n","import React from 'react'\n\nconst Filter = (props) => {\n  return (\n    <input value={props.searchName}\n          onChange={props.handleSearchChange}/>\n  )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst SuccessMsg = ({message})=>{\n\n    const msgStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      border: 'solid',\n      borderRadius: '5px',\n      background:'lightgray'\n    }\n    if(message){\n      return(\n        <div style={msgStyle}>{message}</div>\n      )\n    }\n    else{\n      return null\n    }\n\n}\n\nexport default SuccessMsg\n","import React from 'react'\n\nconst ErrorMsg = ({message})=>{\n\n    const msgStyle = {\n      color: 'red',\n      fontStyle: 'bold',\n      border: 'solid',\n      borderRadius: '5px',\n      background:'lightgray'\n    }\n    if(message){\n      return(\n        <div style={msgStyle}>{message}</div>\n      )\n    }\n    else{\n      return null\n    }\n\n}\n\nexport default ErrorMsg\n","import React, { useState, useEffect } from 'react'\nimport PersonForm from './PersonForm.js'\nimport Person from './Person.js'\nimport Filter from './Filter.js'\nimport SuccessMsg from './SuccessMsg.js'\nimport ErrorMsg from './ErrorMsg.js'\nimport personUtils from '../services/persons_util.js'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchName, setNewSearch] = useState('')\n  const [successMsg, setSuccessMsg] = useState('')\n  const [errorMsg, setErrorMsg] = useState('')\n// Effect hook\n// If the second parameter is an empty array [],\n// then the effect is only run along with the first render of the component.\n  useEffect(() => {\n    console.log('effect')\n    personUtils\n      .getAll()\n      .then(allData =>{\n        console.log('promise fulfilled')\n        setPersons(allData)\n      })\n  }, [])\n  console.log('render', persons.length, 'contacts')\n\n  const displaySuccessNotification = (personObj) =>{\n    setSuccessMsg(`${personObj.name} was successfully added`)\n    setTimeout(()=>{\n      setSuccessMsg(null)\n    },5000)\n  }\n\n  const addInfo = (event) => {\n    event.preventDefault()\n    console.log(event.target)\n    const names = persons.map(person => person.name)\n\n    if(names.includes(newName)){\n      console.log(\"duplicate found\")\n      window.alert(`${newName} is already added to phonebook`)\n    }\n    else{\n      const personObj = {name:newName,\n                      number:newNumber}\n      personUtils\n        .create(personObj)\n        .then(newData=>{\n          setPersons(persons.concat(newData))\n        })\n\n      displaySuccessNotification(personObj)\n\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (event) => {\n    // console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumChange = (event) => {\n    // console.log(event.target.value)\n    // Can we set a local variable here, to avoid re-rendering everytime, change\n    // is made to the form input (since this functinality is different from Search,\n    // where constant re-rendering makes sense)\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    // console.log(event.target.value)\n    setNewSearch(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessMsg message={successMsg}/>\n      <ErrorMsg message={errorMsg}/>\n      <h3>Filter contacts:</h3>\n      <Filter searchName = {searchName}\n              handleSearchChange = {handleSearchChange}/>\n\n      <h3>Add New</h3>\n      <PersonForm addInfo = {addInfo}\n                  newName = {newName}\n                  handleNameChange = {handleNameChange}\n                  newNumber = {newNumber}\n                  handleNumChange = {handleNumChange}\n                  />\n\n      <h3>Contacts</h3>\n        <Person persons = {persons}\n                searchName = {searchName}\n                updatePersons = {setPersons}\n                setErrorMsg = {setErrorMsg}/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}